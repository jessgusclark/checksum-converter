{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","address","setAddress","chainId","setChainId","response","setResponse","className","type","value","onChange","evt","target","parseInt","onClick","console","log","isValidAddress","isNaN","toString","toChecksumAddress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAkDeA,MA7Cf,WAAiB,IAAD,EACgBC,mBAAiB,8CADjC,mBACPC,EADO,KACEC,EADF,OAEgBF,mBAAiB,IAFjC,mBAEPG,EAFO,KAEEC,EAFF,OAGkBJ,mBAAwB,MAH1C,mBAGPK,EAHO,KAGGC,EAHH,KAkBd,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,sCAGA,oCACE,4BACE,kCAAQ,YACN,uBAAOC,KAAK,OAAOC,MAAOR,EAASS,SAAU,SAACC,GAAD,OAAST,EAAWS,EAAIC,OAAOH,eAGhF,4BACE,kCAAQ,aACN,uBAAOD,KAAK,OAAOC,MAAON,EAASO,SAAU,SAACC,GAAD,OAASP,EAAWS,SAASF,EAAIC,OAAOH,gBAGzF,4BACE,wBAAQK,QA9BA,WAEd,OADAC,QAAQC,IAAI,eACPC,yBAAehB,GAIhBiB,MAAMf,IAAmC,KAAvBA,EAAQgB,WACrBb,EAAY,+CAGrBA,EAAYc,4BAAkBnB,EAAqB,IAAZE,EAAgB,KAAOA,IAPrDG,EAAY,gCA2Bf,8BAGJ,kCACGD,GAAY,qBAAKE,UAAU,WAAf,SAA2BF,UC9BjCgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1f2b06e1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { isValidAddress, toChecksumAddress } from 'rskjs-util'\n\nimport './App.scss'\n\nfunction App () {\n  const [address, setAddress] = useState<string>('0x3Dd03d7d6c3137f1Eb7582Ba5957b8A2e26f304A')\n  const [chainId, setChainId] = useState<number>(30)\n  const [response, setResponse] = useState<string | null>(null)\n\n  const convert = () => {\n    console.log('convert it!')\n    if (!isValidAddress(address)) {\n      return setResponse('[ERROR] Not a valid address')\n    }\n\n    if (isNaN(chainId) && chainId.toString() !== '') {\n      return setResponse('[ERROR] ChainId must be a number, or 0')\n    }\n\n    setResponse(toChecksumAddress(address, chainId === 0 ? null : chainId))\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Quick Checksum Converter\n      </header>\n      <section>\n        <p>\n          <label>{'Address: '}\n            <input type=\"text\" value={address} onChange={(evt) => setAddress(evt.target.value)} />\n          </label>\n        </p>\n        <p>\n          <label>{'Chain Id: '}\n            <input type=\"text\" value={chainId} onChange={(evt) => setChainId(parseInt(evt.target.value))} />\n          </label>\n        </p>\n        <p>\n          <button onClick={convert}>Convert It!</button>\n        </p>\n      </section>\n      <section>\n        {response && <div className=\"response\">{response}</div>}\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}